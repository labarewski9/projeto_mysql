USE projeto_financeiro_compras;
DELIMITER //

CREATE PROCEDURE sp_update_programacao_pagamento()
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    START TRANSACTION;

    UPDATE projeto_financeiro_compras.PROGRAMACAO_PAGAMENTO
    INNER JOIN stage_compras.TRATAMENTO_PAGAMENTOS_EFETUADOS E ON PROGRAMACAO_PAGAMENTO.ID_NF_ENTRADA = E.ID_NF_ENTRADA
    SET
        PROGRAMACAO_PAGAMENTO.DATA_PGT_EFETUADO = E.DATA_PGT_EFETUADO,
        PROGRAMACAO_PAGAMENTO.VALOR_PARCELA_PAGO = E.VALOR_PARCELA_PAGO,
        PROGRAMACAO_PAGAMENTO.STATUS_PAGAMENTO = 1
    WHERE PROGRAMACAO_PAGAMENTO.DATA_VENCIMENTO = E.DATA_VENCIMENTO AND PROGRAMACAO_PAGAMENTO.STATUS_PAGAMENTO = 0;

    -- INSERT DOS PAGAMENTOS EFETUADOS DA TABELA DE PROGRAMACAO NO HISTORICO
    INSERT INTO projeto_financeiro_compras.HISTORICO_PAGAMENTO(ID_PROG_PAGAMENTO, ID_NF_ENTRADA, TOTAL_PARCELAS, NUM_PARCELAS, DATA_VENCIMENTO, DATA_PGT_EFETUADO, VALOR_PARCELA, VALOR_PARCELA_PAGO, VALOR_DESCONTO)
    SELECT
        pag.ID_PROG_PAGAMENTO,
        nf.ID_NF_ENTRADA,
        c.QTD_PARCELAS,
        pag.NUM_PARCELA,
        pag.DATA_VENCIMENTO,
        pag.DATA_PGT_EFETUADO,
        pag.VALOR_PARCELA,
        pag.VALOR_PARCELA_PAGO,
        (pag.VALOR_PARCELA - pag.VALOR_PARCELA_PAGO)
    FROM projeto_financeiro_compras.PROGRAMACAO_PAGAMENTO pag
    INNER JOIN projeto_financeiro_compras.NOTAS_FISCAIS_ENTRADA nf ON pag.ID_NF_ENTRADA = nf.ID_NF_ENTRADA
    INNER JOIN projeto_financeiro_compras.CONDICAO_PAGAMENTO c ON nf.ID_CONDICAO = c.ID_CONDICAO
    WHERE pag.STATUS_PAGAMENTO = 1 AND ID_PROG_PAGAMENTO NOT IN (SELECT ID_PROG_PAGAMENTO FROM projeto_financeiro_compras.HISTORICO_PAGAMENTO);

    COMMIT;
    SET SQL_SAFE_UPDATES = 1;
END //

DELIMITER ;



